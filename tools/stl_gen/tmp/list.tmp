package stl_gen

import (
	"errors"
	"sync"
)

type List<T> struct {
	array []<T>
	sync.RWMutex
}

func NewList<T>(capacity int) *List {
	list := List<T>{}
	list.array = make([]<T>, 0, capacity)
	return &list
}

func NewList<T>Raw(raw []<T>) *List {
	list := List<T>{}
	list.array = raw
	return &list
}

func (l *List) Add(item <T>) {
	l.Lock()
	defer l.Unlock()

	l.array = append(l.array, item)
}

func (l *List) Insert(index int, item <T>) error {
	l.Lock()
	defer l.Unlock()

	if index > len(l.array) {
		return errors.New("ArgumentOutOfRange")
	}

	temp := make([]<T>, 0)
	after := append(temp, l.array[index:]...)
	before := l.array[0:index]
	l.array = append(before, item)
	l.array = append(l.array, after...)
	return nil
}

func (l *List) RemoveAt(index int) error {
	l.Lock()
	defer l.Unlock()

	if index > len(l.array) {
		return errors.New("ArgumentOutOfRange")
	}

	l.array = append(l.array[:index], l.array[index+1:]...)
	return nil
}

func (l *List) Remove(item <T>) bool {
	index := l.IndexOf(item)
	if index < 0 {
		return false
	}
	l.RemoveAt(index)
	return true
}

func (l *List) IndexOf(item <T>) int {
	l.RLock()
	defer l.RUnlock()

	count := len(l.array)
	for i := 0; i < count; i++ {
		if l.array[i] == item {
			return i
		}
	}
	return -1
}

func (l *List) Contains(item <T>) bool {
	return l.IndexOf(item) >= 0
}

func (l *List) Count() int {
	l.RLock()
	defer l.RUnlock()

	return len(l.array)
}

func (l *List) Capacity() int {
	l.RLock()
	defer l.RUnlock()

	return cap(l.array)
}

func (l *List) Values() []<T> {
	l.RLock()
	defer l.RUnlock()

	return l.array
}

func (l *List) Get(index int) (<T>, error) {
	l.RLock()
	defer l.RUnlock()

	if index >= len(l.array) {
		return nil, errors.New("ArgumentOutOfRange")
	}
	return l.array[index], nil
}

func (l *List) Set(index int, item <T>) error {
	l.Lock()
	defer l.Unlock()

	if index > len(l.array) {
		return errors.New("ArgumentOutOfRange")
	}
	l.array[index] = item
	return nil
}

func (l *List) Clear() {
	l.Lock()
	defer l.Unlock()

	l.array = l.array[0:0]
}

package stl_gen

import (
	"errors"
	"sync"
)

type Dictionary<K,V> struct {
	_map map[<K>]<V>
	sync.RWMutex
}

func NewDictionary<K,V>() *Dictionary<K,V> {
	dict := Dictionary<K,V>{}
	dict._map = make(map[<K>]<V>)
	return &dict
}

func NewDictionary<K,V>Raw(raw map[<K>]<V>) *Dictionary<K,V> {
	dict := Dictionary<K,V>{}
	dict._map = raw
	return &dict
}

func (h *Dictionary<K,V>) Add(key <K>, value <V>) error {
	h.Lock()
	defer h.Unlock()

	_, exist := h._map[key]
	if exist {
		return errors.New("Has Contains The Same Key!")
	}
	h._map[key] = value
	return nil
}

func (h *Dictionary<K,V>) Remove(key <K>) error {
	h.Lock()
	defer h.Unlock()

	_, exist := h._map[key]
	if exist {
		delete(h._map, key)
		return nil
	}
	return errors.New("Do Not Has The Key!")
}

func (h *Dictionary<K,V>) Set(key <K>, value <V>) {
	h.Lock()
	defer h.Unlock()

	h._map[key] = value
}

func (h *Dictionary<K,V>) Get(key <K>) (<V>, bool) {
	h.RLock()
	defer h.RUnlock()

	v, exist := h._map[key]
	return v, exist
}

func (h *Dictionary<K,V>) Count() int {
	h.RLock()
	defer h.RUnlock()

	return len(h._map)
}

func (h *Dictionary<K,V>) ContainsKey(key <K>) bool {
	h.RLock()
	defer h.RUnlock()

	_, exist := h._map[key]
	return exist
}

func (h *Dictionary<K,V>) ContainsValue(value <V>) bool {
	h.RLock()
	defer h.RUnlock()

	for _, v := range h._map {
		if v == value {
			return true
		}
	}
	return false
}

func (h *Dictionary<K,V>) KeyValuePairs() map[<K>]<V> {
	h.RLock()
	defer h.RUnlock()

	return h._map
}

func (h *Dictionary<K,V>) Clear() {
	h.Lock()
	defer h.Unlock()

	for key, _ := range h._map {
		delete(h._map, key)
	}
}
